import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.Scanner;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;

//import Servers.WebInterface;

public class Client{

    public static void main(String[] args) throws IOException {
        System.out.println("Welcome to cUrl Application");
        read();
        System.out.println("Thank you for using cUrl Application");
    }

    public static void read() throws IOException {
    	ClientLib hlib = new ClientLib();
        Scanner request = new Scanner(System.in);
        int port = 8080;
        //UDP for client to server
        DatagramSocket dsc = new DatagramSocket();  
        InetAddress ip = InetAddress.getLocalHost(); 
        byte buf[] = new byte[65535]; 
        
        while (true) {
        	System.out.println("Do you want multi-client-request ? (y/n)");
        	String multi = request.nextLine();
        	if(multi.equals("y")) {
        		Runnable runnable =
		        () -> {
		        	String req = "httpc post http://localhost:8080/POST/foo -d 'nooooooooooooo'";
		        	byte buf1[] = new byte[65535];
		        	try
		        	{
		        		serverCall(req, port, dsc, buf1, hlib, ip);
		        	}catch (Exception e) {
						e.printStackTrace();
					}
		        };
		        
		        Runnable runnable1 =
		        () -> {
		        	String req = "httpc get http://localhost:8080/Get/";
		        	byte buf1[] = new byte[65535];
		        	try
		        	{
		        		serverCall(req, port, dsc, buf1, hlib, ip);
		        	}catch (Exception e) {
						e.printStackTrace();
					}
		        };
		        
		        Runnable runnable2 =
		        () -> {
		        	String req = "httpc post http://localhost:8080/POST/foo -d 'networkkkkkkkkkk'";
		        	byte buf1[] = new byte[65535];
		        	try
		        	{
		        		serverCall(req, port, dsc, buf1, hlib, ip);
		        	}catch (Exception e) {
						e.printStackTrace();
					}
		        };
		        
		        Runnable runnable3 =
		        () -> {
		        	String req = "httpc get http://localhost:8080/Get/foo";
		        	byte buf1[] = new byte[65535];
		        	try
		        	{
		        		serverCall(req, port, dsc, buf1, hlib, ip);
		        	}catch (Exception e) {
						e.printStackTrace();
					}
		        };
		        
		        Runnable runnable4 =
		        () -> {
		        	String req = "httpc get http://localhost:8080/Get/foo";
		        	byte buf1[] = new byte[65535];
		        	try
		        	{
		        		serverCall(req, port, dsc, buf1, hlib, ip);
		        	}catch (Exception e) {
						e.printStackTrace();
		        	}
		        };
				        
		        Runnable runnable5 =
		        () -> {
		        	String req = "httpc get http://localhost:8080/Get/foo.txt";
		        	byte buf1[] = new byte[65535];
		        	try
		        	{
		        		serverCall(req, port, dsc, buf1, hlib, ip);
		        	}catch (Exception e) {
						e.printStackTrace();
					}
		        };
				        
		        Thread t = new Thread(runnable);
		        Thread t1 = new Thread(runnable1);
		        Thread t2 = new Thread(runnable2);
		        Thread t3 = new Thread(runnable3);
		        Thread t4 = new Thread(runnable4);
		        Thread t5 = new Thread(runnable5);
		        
		        t.start();
		        t1.start();
		        t2.start();
		        t3.start();
		        t4.start();
		        t5.start();
		        
		        System.out.println("\nDo you want to continue??(y/n)");
                Scanner con=new Scanner(System.in);
                String ans = con.nextLine();
                if(ans.equalsIgnoreCase("n")){
//                	buf = ans.getBytes(); 
//                    DatagramPacket DpSend = new DatagramPacket(buf, buf.length, ip, port);
//                    dsc.send(DpSend);
                    break;
                }
        	}else {
        		System.out.println("Please enter your request");
                System.out.println("Request: ");
                String req = request.nextLine();
                
                serverCall(req, port, dsc, buf, hlib, ip);
                
                System.out.println("\nDo you want to continue??(y/n)");
                Scanner con=new Scanner(System.in);
                String ans = con.nextLine();
                if(ans.equalsIgnoreCase("n")){
//                	buf = ans.getBytes(); 
//                    DatagramPacket DpSend = new DatagramPacket(buf, buf.length, ip, port);
//                    dsc.send(DpSend);
                    break;
                }
        	}
        }
    }
    
    public static void serverCall(String req, int port, DatagramSocket dsc, byte buf[], ClientLib hlib, InetAddress ip) throws IOException {
    	
        String[] kwords = req.split(" ");
        int noOfKwords = kwords.length;
        for (int i = 0; i < noOfKwords; i++) {
            kwords[i] = kwords[i].trim();
            if(kwords[i].contains("localhost")) {
            	port = Integer.parseInt(kwords[i].subSequence(17, 21).toString());
            }
        }
        int flag = 0;
        int j = 0;
        do {
            if (kwords[j].compareTo("httpc") == 0) {
                j++;
                switch (kwords[j]) {
                    case "help":
                        try {
                            j++;
                            if (j < noOfKwords) {
                                if (kwords[j].compareTo("get") == 0 && noOfKwords == 3) {
                                    System.out.println("httpc help get");
                                    System.out.println("usage: httpc get [-v] [-h key:value] URL");
                                    System.out.println("Get executes a HTTP GET request for a given URL.");
                                    System.out.println("	-v	Prints the detail of the response such as protocol, status, and headers.");
                                    System.out.println("	-h	 key:value Associates headers to HTTP Request with the format 'key:value'.");
                                    flag = 1;
                                    break;
                                } else if (kwords[j].compareTo("post") == 0 && noOfKwords == 3) {
                                    System.out.println("httpc help post");
                                    System.out.println("usage: httpc post [-v] [-h key:value] [-d inline-data] [-f file] URL");
                                    System.out.println("Post executes a HTTP POST request for a given URL with inline data or from file.");
                                    System.out.println("	-v	 Prints the detail of the response such as protocol, status, and headers.");
                                    System.out.println("	-h	 key:value Associates headers to HTTP Request with the format 'key:value'.");
                                    System.out.println("	-d	 string Associates an inline data to the body HTTP POST request.");
                                    System.out.println("	-f	 file Associates the content of a file to the body HTTP POST request.");
                                    System.out.println("Either [-d] or [-f] can be used but not both.");

                                    flag = 1;
                                    break;
                                } else {
                                    System.out.println("[1]Invalid command.");
                                    System.out.println("Use \"httpc help [command]\" for more information about a command.");
                                    flag = 1;
                                    break;
                                }
                            } else {
                                System.out.println("httpc help");
                                System.out.println("httpc is a curl-like application but supports HTTP protocol only.");
                                System.out.println("Usage:");
                                System.out.println("	httpc command [arguments]");
                                System.out.println("The commands are:");
                                System.out.println("	get 	executes a HTTP GET request and prints the response.");
                                System.out.println("	post 	executes a HTTP POST request and prints the response.");
                                System.out.println("	help	 prints this screen.");
                                System.out.println("Use \"httpc help [command]\" for more information about a command.");
                                flag = 1;
                                break;
                            }
                        } catch (Exception ignored) {
                        }
                        break;
                    case "get":
                        try {
                            j++;
                            String str = null;
                            String[] req1 = req.split(" ",3);
                            System.out.println();
                            if(req1[2].contains("localhost")) {
                            	//UDP request
                                buf = req.getBytes(); 
                                DatagramPacket DpSend = new DatagramPacket(buf, buf.length, ip, port);
                                dsc.send(DpSend);
                                buf = new byte[65535];
                                //UDP response
                                DatagramPacket DpReceive = new DatagramPacket(buf, buf.length);
                                dsc.receive(DpReceive);
                                str = new String(DpReceive.getData());
                            }else {
                            	str = hlib.get(req1[2]);
                            }
                            System.out.println("Request : " + req);
                            System.out.println("Reply : " + str);
                            
                        }
                        catch (Exception ignored) {
                        }
                        flag=1;
                        break;
                    case "post":
                        try {
                            j++;
                            String str = null;
                            String[] req1 = req.split(" ",3);
                            System.out.println();
                            if(req1[2].contains("localhost")) {
                            	//UDP request
                                buf = req.getBytes(); 
                                DatagramPacket DpSend = new DatagramPacket(buf, buf.length, ip, port);
                                dsc.send(DpSend);
                                buf = new byte[65535];
                                //UDP response
                                DatagramPacket DpReceive = new DatagramPacket(buf, buf.length);
                                dsc.receive(DpReceive);
                                str = new String(DpReceive.getData());
                            }else {
                            	str = hlib.post(req1[2]);
                            }
                            System.out.println("Request : " + req);
                            System.out.println("Reply : " + str);
                        }
                        catch (Exception ignored) {
                        }
                        flag=1;
                        break;
                    default:
                        System.out.println("[2]Invalid command.");
                        System.out.println("Use \"httpc help [command]\" for more information about a command.");
                        flag = 1;
                        break;
                }
            } else {
                System.out.println("[3]Invalid command.");
                System.out.println("Use \"httpc help [command]\" for more information about a command.");
                break;
            }
        } while (flag == 0);
    }
}

import java.io.*;
import java.net.Socket;
import java.net.URL;
import java.util.ArrayList;

public class ClientLib {

    private String path;
    private String host;
    private String query;
    private String req;
    private int port;

    synchronized String get(String cmd) throws IOException {
        boolean v = false, o = false, r = true;
        ArrayList<String> headers = new ArrayList<>();
        String url = "";
        String[] kwords = cmd.split(" ");
        String b1 = "";
        String b2 = "";
        String ofile = null;
        String answer = "";

        for(int i=0;i<kwords.length;i++){
            if(kwords[i].equals("-v") || kwords[i].equals("--v")){
                v = true;
            }else if(kwords[i].equals("-h") || kwords[i].equals("--h")){
                i += 1;
                headers.add(kwords[i]);
            }else if(kwords[i].equals("-o") || kwords[i].equals("--o")){
                o = true;
                i += 1;
                ofile = kwords[i];
            }else{
                url = kwords[i];
            }
        }

        URL url1 = new URL(url);
        path = url1.getPath();
        host = url1.getHost();
        port = 80;
        query = url1.getQuery();

        Socket s = new Socket(host,port);
        PrintWriter pr = new PrintWriter(s.getOutputStream(),true);
        BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));

        req = "GET "+path;
        if(query!=null){
            req=req.concat("?"+query);
        }
        req = req.concat(" HTTP/1.0\r\nHost:"+host+"\r\n");
        for (String header : headers) {
            req = req.concat(header + "\r\n");
        }
        req = req.concat("\r\n");
        //System.out.println(req);
        answer += sendReceive(r, v, o, b1, b2, ofile, pr, in, cmd, url);
        return answer;
    }

    synchronized String post(String cmd) throws IOException {
        boolean v = false, d = false, f = false, o = false, r = false;
        ArrayList<String> headers = new ArrayList<>();
        ArrayList<String> data = new ArrayList<>();
        ArrayList<String> file = new ArrayList<>();
        String url = "";
        String[] kwords = cmd.split(" ");
        String b1 = "";
        String b2 = "";
        String ofile = null;
        String answer = "";
        int clength = 0;
        for(int i=0;i<kwords.length;i++){
            if(kwords[i].equals("-v") || kwords[i].equals("--v")){
                v = true;
            }else if(kwords[i].equals("-h") || kwords[i].equals("--h")){
                i += 1;
                headers.add(kwords[i]);
            }else if(kwords[i].equals("-d") || kwords[i].equals("--d")){
                d = true;
                i += 1;
                data.add(kwords[i]);
            }else if(kwords[i].equals("-f") || kwords[i].equals("--f")){
                f = true;
                i += 1;
                file.add(kwords[i]);
            }else if(kwords[i].equals("-o") || kwords[i].equals("--o")){
                o = true;
                i += 1;
                ofile = kwords[i];
            }else{
                url = kwords[i];
            }
        }
        if(d&&f){
            answer += "Can't use -d and -f together.\n";
        }else {
            for(String ifile : file){
                File efile = new File("src/"+ifile);
                if(efile.exists()) {
                    BufferedReader on = new BufferedReader(new FileReader(efile));
                    String file_data;
                    while ((file_data=on.readLine()) != null){
                        data.add(file_data);
                    }
                }else{
                    answer += "File don't exists.\n";
                    return answer;
                }
            }

            URL url1 = new URL(url);
            path = url1.getPath();
            host = url1.getHost();
            port = 80;
            query = url1.getQuery();

            Socket s = new Socket(host, port);
            PrintWriter pr = new PrintWriter(s.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));

            req = "POST " + path;
            if (query != null) {
                req = req.concat("?" + query);
            }
            req = req.concat(" HTTP/1.0\r\nHost:" + host + "\r\n");

            for (String datum : data) {
                clength = clength + datum.length();
            }
            req = req.concat("Content-Length:" + clength + "\r\n");
            for (String header : headers) {
                req = req.concat(header + "\r\n");
            }
            if (data.size() != 0) {
                for (String datum : data) {
                    req = req.concat("\r\n" + datum);
                }
            } else {
                req = req.concat("\r\n");
            }
            //System.out.println(req);
            answer += sendReceive(r, v, o, b1, b2, ofile, pr, in, cmd, url);
            return answer;
        }
		return answer;
    }

    private String sendReceive(boolean r, boolean v, boolean o, String b1, String b2, String ofile, PrintWriter pr, BufferedReader in, String cmd, String url) throws IOException {

        pr.write(req);
        pr.flush();
        String answer = "";
        String new_url = null;
        String reply = in.readLine();
        if(reply.contains("300") || reply.contains("301") || reply.contains("302") || reply.contains("303") || reply.contains("304") || reply.contains("307")){
            if(!r){
                answer += "Redirection is not allowed for POST.\n";
                return answer;
            }
            System.out.println("--------------------------------------------------------");
            System.out.println("Redirection required.");
            System.out.println("--------------------------------------------------------");
            while (reply.length() != 0) {
                if(reply.contains("Location:")){
                    new_url = reply.replace("Location: ","");
                }
                b1 = b1.concat(reply + "\n");
                reply = in.readLine();
            }
            System.out.println(b1);
            b1 = "";
            //System.out.println("old url : "+url);
            //System.out.println("new url : "+new_url);
            if(new_url.equals(url)){
                answer += "--------------------------------------------------------\n";
                answer += "Redirecting url is same as the old one.\n";
                answer += "--------------------------------------------------------\n";
                return answer;
            }else{
                System.out.println("--------------------------------------------------------");
                System.out.println("Redirecting from old to new.");
                System.out.println("--------------------------------------------------------");
                cmd = cmd.replace(url,new_url);
                get(cmd);
            }
        }else{
            while (reply.length() != 0) {
                b1 = b1.concat(reply + "\n");
                reply = in.readLine();
            }
            reply = in.readLine();
            while (reply != null) {
                b2 = b2.concat(reply + "\n");
                reply = in.readLine();
            }
            if(o){
                File f1 = new File(ofile);
                FileWriter fr = new FileWriter(f1);
                if(v){
                    fr.write(b1);
                }
                fr.write(b2);
                fr.close();
            }else {
                if (v) {
                    answer += b1+"\n";
                }
                answer += b2+"\n";
            }
        }
		return answer;
    }
}

//      httpc help
//      httpc help post
//      httpc help get
//      httpc get http://httpbin.org/get?course=networking&assignment=1
//      httpc get -v http://httpbin.org/get?course=networking&assignment=1
//      httpc post -h Content-Type:application/json --d {"Assignment":1} http://httpbin.org/post
//      httpc post -v -h Content-Type:application/json --d {"Assignment":1} http://httpbin.org/post
//      httpc post -h Content-Type:application/json --d {"Assignment":1} -d {"Assignment":2} --d {"Assignment":3} http://httpbin.org/post
//      httpc post -h Content-Type:application/json -f {} -d {} http://httpbin.org/post
//      httpc post -h Content-Type:application/json -f data.txt http://httpbin.org/post
//      httpc post -h Content-Type:application/json -d {"Assignment":1} -o result.txt http://httpbin.org/post
//      httpc get -v -h Content-Type:application/json https://httpstat.us/302
//      redirect url
//      httpc get -v http://mintox.com/contact
//      httpc get -v http://www.socengine.com/soe
{"Assignment":1}
{"Assignment":2}
{"Assignment":3}
network
network
network web
import java.util.*;
import java.io.*;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.stream.Collectors;

public class Server {
	
	public static int port = 8080;
	public static String path = "src/";
	public static Boolean v = false;
	public static Boolean d = false;
	
    public static void main(String[] args) throws Exception {
    	Scanner command = new Scanner(System.in);
        System.out.print(">");
        String input = command.nextLine();
        String[] data = input.split(" ");
        if(data[0].equals("httpfs")) {
        	if(data.length >= 2) {
        		for(int i=1;i<data.length;i++) {
	        		if(data[i].equals("-p")) {
	            		port = Integer.parseInt(data[i+1]);
	            		i+=1;
	            	}else if(data[i].equals("-d")) {
	            		d = true;
	            		path = data[i+1];
	            		i+=1;
	            	}else if(data[i].equals("-v")) {
	            		v = true;
	            	}
        		}
        	}
        	System.out.print("Server is up and running");
        	if(v) {
        		System.out.print(" with port "+port);
        	}
        	if(d) {
        		System.out.print(" and path "+path);
        	}
        	System.out.println();
        	UDPrunning();
        }
    }

    public static void UDPrunning() throws IOException {
    	DatagramSocket dss = new DatagramSocket(port); 
        byte[] receive = new byte[65535];
        String reply = null;
        DatagramPacket DpReceive = null;
        ServerLib slib = new ServerLib();
        while (true) { 
            DpReceive = new DatagramPacket(receive, receive.length); 
            dss.receive(DpReceive); 
            String str = new String(DpReceive.getData());
            // Connections to the ServerLib
            // .....
            if(str.toLowerCase().contains("Get".toLowerCase())) {
            	reply = slib.get(path, str);
            }else if(str.toLowerCase().contains("Post".toLowerCase())) {
            	reply = slib.post(path, str);
            }
            //System.out.println(reply);
            //To Client Starts
            DatagramSocket dsc = new DatagramSocket();  
            InetAddress ip = InetAddress.getLocalHost(); 
            byte buf[] = new byte[65535];

            buf = reply.getBytes(); //reply = msg from server to client
            DatagramPacket DpSend = new DatagramPacket(buf, buf.length, DpReceive.getAddress(), DpReceive.getPort());
            dss.send(DpSend);
            //To Client Ends
            receive = new byte[65535]; 
        }
    }
}

import java.io.*;
import java.net.Socket;
import java.net.URL;
import java.util.ArrayList;

public class ServerLib {

	public String get(String path, String cmd) throws IOException {
        String url = "";
        String reply = "";
        String[] kwords = cmd.trim().split("/");
        String[] kw =cmd.split(" ");
        String[] s=new String[2];
        if(kw.length==5) {
        	s=kw[3].split(":");
        }
        if(kwords.length == 4) {
        	File file = new File(path);
        	File filesList[] = file.listFiles();
        	if(kw[2].equalsIgnoreCase("-h")) {
        		if(s[0].equalsIgnoreCase("Content-Type")) {
        			for(File files : filesList) {
            			if(files.toString().contains("."+s[1])){
            				reply = reply.concat(files.getName()+"\n");
            			}
        			}
        		}else {
        			if(s[1].equalsIgnoreCase("attachment")) {
        				for(File files : filesList) {
	        				reply = reply.concat(getData(files));
	        			}
        				File f1 = new File("src/output.txt");
                        FileWriter fr = new FileWriter(f1);
                        fr.write(reply);
                        fr.close();
        				return "Success";
        			}else {
	        			for(File files : filesList) {
	        				reply = reply.concat(getData(files));
	        			}
        			}
        		}
        	}else {
	            for(File files : filesList) {
	           		reply = reply.concat(files.getName()+"\n");
	            } 
	        }
        	return reply;
        }else {
        	File file = new File(path+kwords[4]); 
        	reply = getData(file);
        }    
        return reply;
    }

	public String getData(File f) throws IOException {
		String reply="";
    	if(f.exists()) {
    		BufferedReader br = new BufferedReader(new FileReader(f)); 
        	String st; 
        	while ((st = br.readLine()) != null) {
        		reply = reply.concat(st+"\n");
        	} 
    	}else {
    		reply = "File not Found.";
    	}
		return reply;		
	} 
	
	
    public String post(String path, String cmd) throws IOException {
    	String reply = "";
        String[] kwords = cmd.split("/");
        String[] kw =kwords[4].split(" ");
        String output = kwords[4].substring(kwords[4].indexOf("'")+1,kwords[4].trim().length()-1);
        String filename = kw[0];
        try {
        	String fill = path+filename;
            File myfile = new File(fill);
            Writer myfiles = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fill), "utf-8"));
            myfiles.write(output);
            myfiles.close();
            reply = "Success";
        } catch (IOException e) {
        	reply = "Error";
            e.printStackTrace();
        }
        return reply;
	}
}


//		LA2 Commands
//		httpc get http://localhost:8080/Get/
//		httpc get http://localhost:8080/Get/foo
//		httpc post http://localhost:8080/POST/foo -d 'network'
//		httpc get -h Content-Type:txt http://localhost:8080/Get/
//		httpc get -h Content-Disposition:attachment http://localhost:8080/Get/
//		httpc get -h Content-Disposition:inline http://localhost:8080/Get/


//		LA1 Commands
//      httpc help
//      httpc help post
//      httpc help get
//      httpc get http://httpbin.org/get?course=networking&assignment=1
//      httpc get -v http://httpbin.org/get?course=networking&assignment=1
//      httpc post -h Content-Type:application/json --d {"Assignment":1} http://httpbin.org/post
//      httpc post -v -h Content-Type:application/json --d {"Assignment":1} http://httpbin.org/post
//      httpc post -h Content-Type:application/json --d {"Assignment":1} -d {"Assignment":2} --d {"Assignment":3} http://httpbin.org/post
//      httpc post -h Content-Type:application/json -f {} -d {} http://httpbin.org/post
//      httpc post -h Content-Type:application/json -f data.txt http://httpbin.org/post
//      httpc post -h Content-Type:application/json -d {"Assignment":1} -o result.txt http://httpbin.org/post
//      httpc get -v -h Content-Type:application/json https://httpstat.us/302
//      redirect url
//      httpc get -v http://mintox.com/contact
//      httpc get -v http://www.socengine.com/soe
